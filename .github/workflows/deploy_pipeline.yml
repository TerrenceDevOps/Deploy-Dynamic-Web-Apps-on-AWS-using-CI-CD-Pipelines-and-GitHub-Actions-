name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: apply
  GITHUB_USERNAME: TerrenceDevOps
  REPOSITORY_NAME: application-repo
  WEB_FILE_ZIP: rentzone.zip
  WEB_FILE_UNZIP: rentzone
  FLYWAY_VERSION: 9.16.1

jobs:
  configure_aws_credentials:
    name: Configure AWS credentials
    runs-on: ubuntu-latest
    steps:
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

  deploy_aws_infrastructure:
    name: Build AWS infrastructure
    needs: configure_aws_credentials
    runs-on: ubuntu-latest
    outputs:
      terraform_action: ${{ env.TERRAFORM_ACTION }}
      image_name: ${{ env.IMAGE_NAME }}
      domain_name: ${{ env.DOMAIN_NAME }}
      rds_endpoint: ${{ env.RDS_ENDPOINT }}
      image_tag: ${{ env.IMAGE_TAG }}
      private_data_subnet_az1_id: ${{ env.PRIVATE_DATA_SUBNET_AZ1_ID }}
      runner_security_group_id: ${{ env.RUNNER_SECURITY_GROUP_ID }}
      task_definition_name: ${{ env.TASK_DEFINITION_NAME }}
      ecs_cluster_name: ${{ env.ECS_CLUSTER_NAME }}
      ecs_service_name: ${{ env.ECS_SERVICE_NAME }}
      environment_file_name: ${{ env.ENVIRONMENT_FILE_NAME }}
      env_file_bucket_name: ${{ env.ENV_FILE_BUCKET_NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Run Terraform initialize
        working-directory: ./iac
        run: terraform init

      - name: Run Terraform apply/destroy
        working-directory: ./iac
        run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve

      - name: Get Terraform outputs
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          echo "IMAGE_NAME=$(terraform output -raw image_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "DOMAIN_NAME=$(terraform output -raw domain_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$(terraform output -raw rds_endpoint | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(terraform output -raw image_tag | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "PRIVATE_DATA_SUBNET_AZ1_ID=$(terraform output -raw private_data_subnet_az1_id | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "RUNNER_SECURITY_GROUP_ID=$(terraform output -raw runner_security_group_id | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "TASK_DEFINITION_NAME=$(terraform output -raw task_definition_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=$(terraform output -raw ecs_service_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "ENVIRONMENT_FILE_NAME=$(terraform output -raw environment_file_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "ENV_FILE_BUCKET_NAME=$(terraform output -raw env_file_bucket_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV

  create_ecr_repository:
    name: Create ECR repository
    needs: deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sanitize and validate IMAGE_NAME
        run: |
          RAW_IMAGE_NAME="${{ needs.deploy_aws_infrastructure.outputs.image_name }}"
          SANITIZED_NAME=$(echo "$RAW_IMAGE_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._/-]/-/g' | sed 's/[-_]\+/-/g' | sed 's/^[-_]*//;s/[-_]*$//')

          if [[ -z "$SANITIZED_NAME" ]]; then
            echo "Error: Image name cannot be empty after sanitization"
            exit 1
          fi

          echo "IMAGE_NAME=$SANITIZED_NAME" >> $GITHUB_ENV

      - name: Check if ECR repository exists
        run: |
          REPO_CHECK=$(aws ecr describe-repositories --repository-names "$IMAGE_NAME" 2>&1)
          if echo "$REPO_CHECK" | grep -q RepositoryNotFoundException; then
            echo "REPO_EXISTS=false" >> $GITHUB_ENV
          else
            echo "REPO_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Create ECR repository if not exists
        if: env.REPO_EXISTS == 'false'
        run: |
          aws ecr create-repository \
            --repository-name "$IMAGE_NAME" \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256 \
            --region $AWS_REGION

  start_runner:
    name: Start self-hosted EC2 runner
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Check for running EC2 runner
        id: check-runner
        run: |
          instances=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=ec2-github-runner" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].InstanceId' --output text)
          if [ -n "$instances" ]; then
            echo "runner_running=true" >> $GITHUB_ENV
            echo "existing_instance=$instances" >> $GITHUB_ENV
          else
            echo "runner_running=false" >> $GITHUB_ENV
          fi

      - name: Get latest Ubuntu 22.04 LTS AMI
        if: env.runner_running != 'true'
        run: |
          UBUNTU_AMI_ID=$(aws ec2 describe-images \
            --owners 099720109477 \
            --filters \
              "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" \
              "Name=state,Values=available" \
            --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
            --output text)

          echo "UBUNTU_AMI_ID=$UBUNTU_AMI_ID" >> $GITHUB_ENV
          echo "Using Ubuntu 22.04 LTS AMI: $UBUNTU_AMI_ID"

      - name: Start EC2 runner
        if: env.runner_running != 'true'
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ${{ env.UBUNTU_AMI_ID }}
          ec2-instance-type: t3.small
          subnet-id: ${{ needs.deploy_aws_infrastructure.outputs.private_data_subnet_az1_id }}
          security-group-id: ${{ needs.deploy_aws_infrastructure.outputs.runner_security_group_id }}
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}" }
            ]

      - name: Set runner label output
        id: set-output
        run: |
          if [ "${{ env.runner_running }}" == "true" ]; then
            echo "label=self-hosted" >> $GITHUB_OUTPUT
            echo "ec2-instance-id=${{ env.existing_instance }}" >> $GITHUB_OUTPUT
          else
            echo "label=${{ steps.start-ec2-runner.outputs.label }}" >> $GITHUB_OUTPUT
            echo "ec2-instance-id=${{ steps.start-ec2-runner.outputs.ec2-instance-id }}" >> $GITHUB_OUTPUT
          fi

    outputs:
      label: ${{ steps.set-output.outputs.label }}
      ec2-instance-id: ${{ steps.set-output.outputs.ec2-instance-id }}

  build_and_push_image:
    name: Build and push Docker image to ECR
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - create_ecr_repository
      - start_runner
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ${{ needs.start_runner.outputs.label || 'ubuntu-latest' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Update system and install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl unzip

      - name: Build Docker image
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          GITHUB_USERNAME: ${{ env.GITHUB_USERNAME }}
          REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
          WEB_FILE_ZIP: ${{ env.WEB_FILE_ZIP }}
          WEB_FILE_UNZIP: ${{ env.WEB_FILE_UNZIP }}
          DOMAIN_NAME: ${{ needs.deploy_aws_infrastructure.outputs.domain_name }}
          RDS_ENDPOINT: ${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          RDS_DB_USERNAME: ${{ secrets.RDS_DB_USERNAME }}
          RDS_DB_PASSWORD: ${{ secrets.RDS_DB_PASSWORD }}
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
          IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
        run: |
          docker build \
            --build-arg PERSONAL_ACCESS_TOKEN=$PERSONAL_ACCESS_TOKEN \
            --build-arg GITHUB_USERNAME=$GITHUB_USERNAME \
            --build-arg REPOSITORY_NAME=$REPOSITORY_NAME \
            --build-arg WEB_FILE_ZIP=$WEB_FILE_ZIP \
            --build-arg WEB_FILE_UNZIP=$WEB_FILE_UNZIP \
            --build-arg DOMAIN_NAME=$DOMAIN_NAME \
            --build-arg RDS_ENDPOINT=$RDS_ENDPOINT \
            --build-arg RDS_DB_NAME=$RDS_DB_NAME \
            --build-arg RDS_DB_USERNAME=$RDS_DB_USERNAME \
            --build-arg RDS_DB_PASSWORD=$RDS_DB_PASSWORD \
            -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Retag Docker image for ECR
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
          IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          ECR_REPO_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME
          docker tag $IMAGE_NAME:$IMAGE_TAG $ECR_REPO_URI:$IMAGE_TAG
          echo "ECR_REPO_URI=$ECR_REPO_URI" >> $GITHUB_ENV

      - name: Push Docker Image to Amazon ECR
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
          IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          ECR_REPO_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME
          docker push $ECR_REPO_URI:$IMAGE_TAG

  export_env_variables:
    name: Create environment file and export to S3
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - start_runner
      - build_and_push_image
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Export environment variable values to file
        env:
          DOMAIN_NAME: ${{ needs.deploy_aws_infrastructure.outputs.domain_name }}
          RDS_ENDPOINT: ${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }}
          ENVIRONMENT_FILE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.environment_file_name }}
          GITHUB_USERNAME: ${{ env.GITHUB_USERNAME }}
          REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
          WEB_FILE_ZIP: ${{ env.WEB_FILE_ZIP }}
          WEB_FILE_UNZIP: ${{ env.WEB_FILE_UNZIP }}
          FLYWAY_VERSION: ${{ env.FLYWAY_VERSION }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          RDS_DB_USERNAME: ${{ secrets.RDS_DB_USERNAME }}
          RDS_DB_PASSWORD: ${{ secrets.RDS_DB_PASSWORD }}
        run: |
          cat > $ENVIRONMENT_FILE_NAME <<EOF
          DOMAIN_NAME=$DOMAIN_NAME
          RDS_ENDPOINT=$RDS_ENDPOINT
          RDS_DB_NAME=$RDS_DB_NAME
          RDS_DB_USERNAME=$RDS_DB_USERNAME
          RDS_DB_PASSWORD=$RDS_DB_PASSWORD
          FLYWAY_VERSION=$FLYWAY_VERSION
          GITHUB_USERNAME=$GITHUB_USERNAME
          REPOSITORY_NAME=$REPOSITORY_NAME
          WEB_FILE_ZIP=$WEB_FILE_ZIP
          WEB_FILE_UNZIP=$WEB_FILE_UNZIP
          EOF
          echo "Created environment file $ENVIRONMENT_FILE_NAME"
          # Upload environment file to S3 bucket
          aws s3 cp $ENVIRONMENT_FILE_NAME s3://${{ needs.deploy_aws_infrastructure.outputs.env_file_bucket_name }}/

  update_ecs_task_definition:
    name: Update ECS task definition and restart service
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - build_and_push_image
      - export_env_variables
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Update ECS task definition with new image
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
          IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
          TASK_DEFINITION_NAME: ${{ needs.deploy_aws_infrastructure.outputs.task_definition_name }}
          ENVIRONMENT_FILE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.environment_file_name }}
          ENV_FILE_BUCKET_NAME: ${{ needs.deploy_aws_infrastructure.outputs.env_file_bucket_name }}
          ECS_CLUSTER_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_cluster_name }}
          ECS_SERVICE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_service_name }}
        run: |
          # Compose full image URI
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG

          # Fetch current task definition JSON
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME > task-def.json

          # Use jq to update the container image URI
          jq --arg IMAGE_URI "$IMAGE_URI" '.taskDefinition.containerDefinitions[0].image = $IMAGE_URI' task-def.json > new-task-def.json

          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "New task definition registered: $NEW_TASK_DEF_ARN"

          # Update ECS service to use new task definition
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN

          # Optionally, force new deployment to restart tasks
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
