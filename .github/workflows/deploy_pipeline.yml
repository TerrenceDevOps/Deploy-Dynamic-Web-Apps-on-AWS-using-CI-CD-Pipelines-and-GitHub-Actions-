name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: apply  # change to 'destroy' when needed

jobs:
  deploy_pipeline:
    name: Deploy AWS Infrastructure
    runs-on: ubuntu-latest
    outputs:
      tf_image_name: ${{ steps.extract_outputs.outputs.image_name }}
    steps:
      - uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: ./iac
        run: terraform init -input=false

      - name: Terraform Apply/Destroy
        working-directory: ./iac
        run: |
          if [ "${{ env.TERRAFORM_ACTION }}" = "apply" ]; then
            terraform plan -out=tfplan
            terraform apply -auto-approve tfplan
          else
            terraform destroy -auto-approve
          fi

      - name: Extract Outputs
        id: extract_outputs
        if: ${{ env.TERRAFORM_ACTION == 'apply' }}
        working-directory: ./iac
        run: |
          # Simplified output handling without GITHUB_ENV
          outputs=(
            "image_name"
            "domain_name"
            "rds_endpoint"
            "image_tag"
          )
          
          for output in "${outputs[@]}"; do
            value=$(terraform output -raw $output 2>/dev/null || echo "")
            echo "$output=$value" >> $GITHUB_OUTPUT
          done

  create_ecr_repository:
    name: Create ECR Repository
    needs: deploy_pipeline
   
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Repository
        run: |
          aws ecr create-repository \
            --repository-name "${{ needs.deploy_pipeline.outputs.tf_image_name }}" \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256 || \
          echo "Repository may already exist"