name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: apply
  GITHUB_USERNAME: TerrenceDevOps
  REPOSITORY_NAME: application-repo
  WEB_FILE_ZIP: rentzone.zip
  WEB_FILE_UNZIP: rentzone

jobs:
  configure_aws_credentials:
    name: Configure AWS credentials
    runs-on: ubuntu-latest
    steps:
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

  deploy_aws_infrastructure:
    name: Build AWS infrastructure
    needs: configure_aws_credentials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Run Terraform initialize
        working-directory: ./iac
        run: terraform init

      - name: Run Terraform apply/destroy
        working-directory: ./iac
        run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve

      - name: Get Terraform outputs
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          echo "Fetching Terraform outputs..."
          echo "IMAGE_NAME=$(terraform output -raw image_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "DOMAIN_NAME=$(terraform output -raw domain_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$(terraform output -raw rds_endpoint | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(terraform output -raw image_tag | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "PRIVATE_DATA_SUBNET_AZ1_ID=$(terraform output -raw private_data_subnet_az1_id | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "RUNNER_SECURITY_GROUP_ID=$(terraform output -raw runner_security_group_id | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "TASK_DEFINITION_NAME=$(terraform output -raw task_definition_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=$(terraform output -raw ecs_service_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "ENVIRONMENT_FILE_NAME=$(terraform output -raw environment_file_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "ENV_FILE_BUCKET_NAME=$(terraform output -raw env_file_bucket_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV

      - name: Print GITHUB_ENV contents
        run: cat $GITHUB_ENV

    outputs:
      terraform_action: ${{ env.TERRAFORM_ACTION }}
      image_name: ${{ env.IMAGE_NAME }}
      domain_name: ${{ env.DOMAIN_NAME }}
      rds_endpoint: ${{ env.RDS_ENDPOINT }}
      image_tag: ${{ env.IMAGE_TAG }}
      private_data_subnet_az1_id: ${{ env.PRIVATE_DATA_SUBNET_AZ1_ID }}
      runner_security_group_id: ${{ env.RUNNER_SECURITY_GROUP_ID }}
      task_definition_name: ${{ env.TASK_DEFINITION_NAME }}
      ecs_cluster_name: ${{ env.ECS_CLUSTER_NAME }}
      ecs_service_name: ${{ env.ECS_SERVICE_NAME }}
      environment_file_name: ${{ env.ENVIRONMENT_FILE_NAME }}
      env_file_bucket_name: ${{ env.ENV_FILE_BUCKET_NAME }}

  create_ecr_repository:
    name: Create ECR repository
    needs: deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sanitize and validate IMAGE_NAME
        run: |
          RAW_IMAGE_NAME="${{ needs.deploy_aws_infrastructure.outputs.image_name }}"
          echo "Raw IMAGE_NAME: $RAW_IMAGE_NAME"

          SANITIZED_NAME=$(echo "$RAW_IMAGE_NAME" | \
            tr '[:upper:]' '[:lower:]' | \
            sed 's/[^a-z0-9._/-]/-/g' | \
            sed 's/[-_]\+/-/g' | \
            sed 's/^[-_]*//;s/[-_]*$//')

          if [[ -z "$SANITIZED_NAME" ]]; then
            echo "Error: Image name cannot be empty after sanitization"
            exit 1
          fi

          if [[ ! "$SANITIZED_NAME" =~ ^[a-z0-9]+([._-][a-z0-9]+)*(/[a-z0-9]+([._-][a-z0-9]+)*)*$ ]]; then
            echo "Error: Sanitized name '$SANITIZED_NAME' still doesn't meet ECR requirements"
            exit 1
          fi

          echo "Sanitized IMAGE_NAME: $SANITIZED_NAME"
          echo "IMAGE_NAME=$SANITIZED_NAME" >> $GITHUB_ENV

      - name: Check if ECR repository exists
        run: |
          echo "Checking if ECR repo exists: $IMAGE_NAME"
          set +e
          REPO_CHECK=$(aws ecr describe-repositories --repository-names "$IMAGE_NAME" 2>&1)
          REPO_EXIT_CODE=$?
          set -e

          if [ $REPO_EXIT_CODE -eq 0 ]; then
            echo "Repository exists"
            echo "REPO_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Repository does not exist or error occurred: $REPO_CHECK"
            echo "REPO_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create ECR repository if not exists
        if: env.REPO_EXISTS == 'false'
        run: |
          echo "Creating ECR repository: $IMAGE_NAME"
          aws ecr create-repository \
            --repository-name "$IMAGE_NAME" \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256 \
            --region $AWS_REGION
          echo "ECR repository '$IMAGE_NAME' created successfully"

      - name: Set repository URI output
        run: |
          REPO_URI=$(aws ecr describe-repositories --repository-names "$IMAGE_NAME" --query 'repositories[0].repositoryUri' --output text)
          echo "ECR_REPOSITORY_URI=$REPO_URI" >> $GITHUB_ENV
          echo "Repository URI: $REPO_URI"

  start_runner:
    name: Start self-hosted EC2 runner
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Check for running EC2 runner
        run: |
          instances=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=ec2-github-runner" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].InstanceId' --output text)

          if [ -n "$instances" ]; then
            echo "runner-running=true" >> $GITHUB_ENV
          else
            echo "runner-running=false" >> $GITHUB_ENV
          fi

      - name: Start EC2 runner
        if: env.runner-running != 'true'
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-0f6d2920102de908a
          ec2-instance-type: t2.micro
          subnet-id: ${{ needs.deploy_aws_infrastructure.outputs.private_data_subnet_az1_id }}
          security-group-id: ${{ needs.deploy_aws_infrastructure.outputs.runner_security_group_id }}
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}" }
            ]

    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}


  # Build and push Docker image to ECR
  build_and_push_image:
    name: Build and push Docker image to ECR
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - create_ecr_repository
      - start_runner
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        env:
          DOMAIN_NAME: ${{ needs.deploy_aws_infrastructure.outputs.domain_name }}
          RDS_ENDPOINT: ${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }} 
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
          IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
         
        run: |
          docker build \
          --build-arg PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} \
          --build-arg GITHUB_USERNAME=${{ env.GITHUB_USERNAME  }} \
          --build-arg REPOSITORY_NAME=${{ env.REPOSITORY_NAME }} \
          --build-arg WEB_FILE_ZIP=${{ env.WEB_FILE_ZIP }} \
          --build-arg WEB_FILE_UNZIP=${{ env.WEB_FILE_UNZIP }} \
          --build-arg DOMAIN_NAME=${{ env.DOMAIN_NAME }} \
          --build-arg RDS_ENDPOINT=${{ env.RDS_ENDPOINT }} \
          --build-arg RDS_DB_NAME=${{ secrets.RDS_DB_NAME }} \
          --build-arg RDS_DB_USERNAME=${{ secrets.RDS_DB_USERNAME }} \
          --build-arg RDS_DB_PASSWORD=${{ secrets.RDS_DB_PASSWORD }} \
          -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Retag Docker image
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
        run: |
          docker tag ${{ env.IMAGE_NAME }} ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Push Docker Image to Amazon ECR
        env:
          IMAGE_NAME: ${{ needs }}
        run: |
          docker push ${{ secrets.ECR_REGISTRY  }}/${{ env.IMAGE_NAME }}
