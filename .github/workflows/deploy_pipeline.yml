name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: apply
  GITHUB_USERNAME: TerrenceDevOps
  REPOSITORY_NAME: application-repo
  WEB_FILE_ZIP: rentzone.zip
  WEB_FILE_UNZIP: rentzone
  FLYWAY_VERSION: 9.16.1

# ======================= Configure AWS =======================
jobs:
  configure_aws_credentials:
    name: Configure AWS credentials
    runs-on: ubuntu-latest
    steps:
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

# ==================== Deploy Infrastructure ====================
  deploy_aws_infrastructure:
    name: Build AWS infrastructure
    needs: configure_aws_credentials
    runs-on: ubuntu-latest
    outputs:
      terraform_action: ${{ env.TERRAFORM_ACTION }}
      image_name: ${{ env.IMAGE_NAME }}
      domain_name: ${{ env.DOMAIN_NAME }}
      rds_endpoint: ${{ env.RDS_ENDPOINT }}
      image_tag: ${{ env.IMAGE_TAG }}
      private_data_subnet_az1_id: ${{ env.PRIVATE_DATA_SUBNET_AZ1_ID }}
      runner_security_group_id: ${{ env.RUNNER_SECURITY_GROUP_ID }}
      task_definition_name: ${{ env.TASK_DEFINITION_NAME }}
      ecs_cluster_name: ${{ env.ECS_CLUSTER_NAME }}
      ecs_service_name: ${{ env.ECS_SERVICE_NAME }}
      environment_file_name: ${{ env.ENVIRONMENT_FILE_NAME }}
      env_file_bucket_name: ${{ env.ENV_FILE_BUCKET_NAME }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - run: terraform init
        working-directory: ./iac

      - run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve
        working-directory: ./iac

      - name: Set outputs from Terraform
        if: env.TERRAFORM_ACTION == 'apply'
        run: |
          echo "IMAGE_NAME=$(terraform output -raw image_name)" >> $GITHUB_ENV
          echo "DOMAIN_NAME=$(terraform output -raw domain_name)" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(terraform output -raw image_tag)" >> $GITHUB_ENV
          echo "PRIVATE_DATA_SUBNET_AZ1_ID=$(terraform output -raw private_data_subnet_az1_id)" >> $GITHUB_ENV
          echo "RUNNER_SECURITY_GROUP_ID=$(terraform output -raw runner_security_group_id)" >> $GITHUB_ENV
          echo "TASK_DEFINITION_NAME=$(terraform output -raw task_definition_name)" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=$(terraform output -raw ecs_service_name)" >> $GITHUB_ENV
          echo "ENVIRONMENT_FILE_NAME=$(terraform output -raw environment_file_name)" >> $GITHUB_ENV
          echo "ENV_FILE_BUCKET_NAME=$(terraform output -raw env_file_bucket_name)" >> $GITHUB_ENV

# ===================== Create ECR Repository =====================
  create_ecr_repository:
    name: Create ECR repository
    needs: deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          IMAGE_NAME="${{ needs.deploy_aws_infrastructure.outputs.image_name }}"
          SANITIZED_NAME=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._/-]/-/g')
          echo "IMAGE_NAME=$SANITIZED_NAME" >> $GITHUB_ENV

      - run: |
          if ! aws ecr describe-repositories --repository-names "$IMAGE_NAME"; then
            aws ecr create-repository --repository-name "$IMAGE_NAME" \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256
          fi

# ===================== Start EC2 Self-hosted Runner =====================
  start_runner:
    name: Start self-hosted EC2 runner
    needs: 
      - configure_aws_credentials
      - deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'apply'
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.set-output.outputs.label }}
      ec2-instance-id: ${{ steps.set-output.outputs.ec2-instance-id }}
    steps:
      - name: Check if EC2 runner exists
        id: check-runner
        run: |
          instance_id=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=ec2-github-runner" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          if [[ -n "$instance_id" ]]; then
            echo "runner_running=true" >> $GITHUB_ENV
            echo "existing_instance=$instance_id" >> $GITHUB_ENV
          else
            echo "runner_running=false" >> $GITHUB_ENV
          fi

      - name: Get Ubuntu AMI
        if: env.runner_running != 'true'
        run: |
          UBUNTU_AMI_ID=$(aws ec2 describe-images \
            --owners 099720109477 \
            --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" \
            --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)
          echo "UBUNTU_AMI_ID=$UBUNTU_AMI_ID" >> $GITHUB_ENV

      - name: Start EC2 runner
        if: env.runner_running != 'true'
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ${{ env.UBUNTU_AMI_ID }}
          ec2-instance-type: t3.small
          subnet-id: ${{ needs.deploy_aws_infrastructure.outputs.private_data_subnet_az1_id }}
          security-group-id: ${{ needs.deploy_aws_infrastructure.outputs.runner_security_group_id }}

      - name: Set runner label
        id: set-output
        run: |
          echo "label=self-hosted" >> $GITHUB_OUTPUT

# =================== Build & Push Docker Image to ECR ===================
  build_and_push_image:
    name: Build and push Docker image to ECR
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - create_ecr_repository
      - start_runner
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ${{ needs.start_runner.outputs.label || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/amazon-ecr-login@v1

      - name: Install Docker deps
        run: sudo apt-get update -y && sudo apt-get install -y curl unzip

      - name: Build Docker image
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
          IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
          DOMAIN_NAME: ${{ needs.deploy_aws_infrastructure.outputs.domain_name }}
          RDS_ENDPOINT: ${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          RDS_DB_USERNAME: ${{ secrets.RDS_DB_USERNAME }}
          RDS_DB_PASSWORD: ${{ secrets.RDS_DB_PASSWORD }}
        run: |
          docker build \
            --build-arg PERSONAL_ACCESS_TOKEN=$PERSONAL_ACCESS_TOKEN \
            --build-arg DOMAIN_NAME=$DOMAIN_NAME \
            --build-arg RDS_ENDPOINT=$RDS_ENDPOINT \
            --build-arg RDS_DB_NAME=$RDS_DB_NAME \
            --build-arg RDS_DB_USERNAME=$RDS_DB_USERNAME \
            --build-arg RDS_DB_PASSWORD=$RDS_DB_PASSWORD \
            -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Tag and Push to ECR
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
          IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
        run: |
          REPO_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME
          docker tag $IMAGE_NAME:$IMAGE_TAG $REPO_URI:$IMAGE_TAG
          docker push $REPO_URI:$IMAGE_TAG

# ================== Export Env File to S3 ==================
  export_env_variables:
    name: Export environment file to S3
    needs:
      - build_and_push_image
      - deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - run: |
          cat > ${{ needs.deploy_aws_infrastructure.outputs.environment_file_name }} <<EOF
          DOMAIN_NAME=${{ needs.deploy_aws_infrastructure.outputs.domain_name }}
          RDS_ENDPOINT=${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }}
          RDS_DB_NAME=${{ secrets.RDS_DB_NAME }}
          RDS_DB_USERNAME=${{ secrets.RDS_DB_USERNAME }}
          RDS_DB_PASSWORD=${{ secrets.RDS_DB_PASSWORD }}
          EOF

          aws s3 cp ${{ needs.deploy_aws_infrastructure.outputs.environment_file_name }} \
            s3://${{ needs.deploy_aws_infrastructure.outputs.env_file_bucket_name }}/

# ================== Update ECS Task ==================
  update_ecs_task_definition:
    name: Update ECS Task Definition
    needs:
      - export_env_variables
      - deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Update ECS Task Definition
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
          IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          TASK_DEFINITION_NAME: ${{ needs.deploy_aws_infrastructure.outputs.task_definition_name }}
          ECS_CLUSTER_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_cluster_name }}
          ECS_SERVICE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_service_name }}
        run: |
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME > task-def.json
          jq --arg IMAGE_URI "$IMAGE_URI" '.taskDefinition.containerDefinitions[0].image = $IMAGE_URI' task-def.json > new-task-def.json
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $NEW_TASK_DEF
