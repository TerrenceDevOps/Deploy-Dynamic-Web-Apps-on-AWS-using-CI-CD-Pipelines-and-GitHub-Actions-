name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  # change to 'apply' or 'destroy' as needed
  TERRAFORM_ACTION: apply

jobs:
  deploy_pipeline:
    name: Deploy AWS Infrastructure with Terraform
    runs-on: ubuntu-latest
    outputs:
      IMAGE_NAME: ${{ steps.extract_outputs.outputs.IMAGE_NAME }}
      TERRAFORM_ACTION: ${{ env.TERRAFORM_ACTION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # Updated to v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7  # Updated to a more recent version

      - name: Terraform Init
        working-directory: ./iac
        run: terraform init -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Terraform Format
        working-directory: ./iac
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: ./iac
        run: terraform validate

      - name: Terraform Plan (Dry Run)
        if: ${{ env.TERRAFORM_ACTION == 'apply' }}
        working-directory: ./iac
        run: terraform plan -input=false -out=tfplan

      - name: Terraform Apply/Destroy
        working-directory: ./iac
        run: |
          if [ "${{ env.TERRAFORM_ACTION }}" == "apply" ]; then
            terraform apply -input=false -auto-approve tfplan
          else
            terraform destroy -input=false -auto-approve
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          
      - name: Extract Terraform outputs
        id: extract_outputs
        if: ${{ env.TERRAFORM_ACTION == 'apply' }}
        working-directory: ./iac
        run: |
          # Function to safely handle outputs
          handle_output() {
            local output_name=$1
            local output_value=$(terraform output -raw $output_name 2>/dev/null || echo "")
            echo "$output_name=$output_value" >> $GITHUB_ENV
            echo "$output_name=$output_value" >> $GITHUB_OUTPUT
            return 0
          }
          
          # Set outputs
          handle_output "IMAGE_NAME"
          handle_output "domain_name"
          handle_output "rds_endpoint"
          handle_output "image_tag"
          handle_output "private_data_subnet_az1_id"
          handle_output "runner_security_group_id"
          handle_output "task_definition_name"
          handle_output "ecs_cluster_name"
          handle_output "ecs_service_name"
          handle_output "environment_file_name"
          handle_output "env_file_bucket_name"

      - name: Print GITHUB_ENV contents
        if: ${{ env.TERRAFORM_ACTION == 'apply' }}
        run: cat $GITHUB_ENV

  create_ecr_repository:
    name: Create ECR Repository
    runs-on: ubuntu-latest
    needs: deploy_pipeline
    if: ${{ needs.deploy_pipeline.outputs.TERRAFORM_ACTION == 'apply' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if ECR repository exists
        id: check_repo
        run: |
          REPO_NAME="${{ needs.deploy_pipeline.outputs.IMAGE_NAME }}"
          echo "Checking repository: $REPO_NAME"
          
          if aws ecr describe-repositories --repository-names "$REPO_NAME" >/dev/null 2>&1; then
            echo "Repository exists"
            echo "repo_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Repository does not exist"
            echo "repo_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create ECR repository
        if: ${{ steps.check_repo.outputs.repo_exists == 'false' }}
        run: |
          REPO_NAME="${{ needs.deploy_pipeline.outputs.IMAGE_NAME }}"
          echo "Creating repository: $REPO_NAME"
          
          # Create repository with appropriate permissions and settings
          aws ecr create-repository \
            --repository-name "$REPO_NAME" \
            --image-tag-mutability MUTABLE \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
          
          echo "Repository created successfully"