name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: apply
  GITHUB_USERNAME: TerrenceDevOps
  REPOSITORY_NAME: application-repo
  WEB_FILE_ZIP: rentzone.zip
  WEB_FILE_UNZIP: rentzone
  FLYWAY_VERSION: 9.16.1

jobs:
  configure_aws_credentials:
    name: Configure AWS credentials
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

  deploy_aws_infrastructure:
    name: Build AWS infrastructure
    needs: configure_aws_credentials
    runs-on: ubuntu-latest
    outputs:
      terraform_action: ${{ env.TERRAFORM_ACTION }}
      image_name: ${{ steps.get_outputs.outputs.image_name }}
      domain_name: ${{ steps.get_outputs.outputs.domain_name }}
      rds_endpoint: ${{ steps.get_outputs.outputs.rds_endpoint }}
      image_tag: ${{ steps.get_outputs.outputs.image_tag }}
      private_data_subnet_az1_id: ${{ steps.get_outputs.outputs.private_data_subnet_az1_id }}
      runner_security_group_id: ${{ steps.get_outputs.outputs.runner_security_group_id }}
      task_definition_name: ${{ steps.get_outputs.outputs.task_definition_name }}
      ecs_cluster_name: ${{ steps.get_outputs.outputs.ecs_cluster_name }}
      ecs_service_name: ${{ steps.get_outputs.outputs.ecs_service_name }}
      environment_file_name: ${{ steps.get_outputs.outputs.environment_file_name }}
      env_file_bucket_name: ${{ steps.get_outputs.outputs.env_file_bucket_name }}
      ecr_registry: ${{ steps.get_outputs.outputs.ecr_registry }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: ./iac
        run: terraform init

      - name: Terraform Apply/Destroy
        working-directory: ./iac
        run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve

      - name: Get Terraform Outputs
        id: get_outputs
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          echo "image_name=$(terraform output -raw image_name)" >> $GITHUB_OUTPUT
          echo "domain_name=$(terraform output -raw domain_name)" >> $GITHUB_OUTPUT
          echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT
          echo "image_tag=$(terraform output -raw image_tag)" >> $GITHUB_OUTPUT
          echo "private_data_subnet_az1_id=$(terraform output -raw private_data_subnet_az1_id)" >> $GITHUB_OUTPUT
          echo "runner_security_group_id=$(terraform output -raw runner_security_group_id)" >> $GITHUB_OUTPUT
          echo "task_definition_name=$(terraform output -raw task_definition_name)" >> $GITHUB_OUTPUT
          echo "ecs_cluster_name=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT
          echo "ecs_service_name=$(terraform output -raw ecs_service_name)" >> $GITHUB_OUTPUT
          echo "environment_file_name=$(terraform output -raw environment_file_name)" >> $GITHUB_OUTPUT
          echo "env_file_bucket_name=$(terraform output -raw env_file_bucket_name)" >> $GITHUB_OUTPUT
          echo "ecr_registry=$(terraform output -raw ecr_registry)" >> $GITHUB_OUTPUT

  create_ecr_repository:
    name: Create ECR repository
    needs: deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sanitize and validate IMAGE_NAME
        run: |
          RAW_IMAGE_NAME="${{ needs.deploy_aws_infrastructure.outputs.image_name }}"
          SANITIZED_NAME=$(echo "$RAW_IMAGE_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._/-]/-/g' | sed 's/[-_]\+/-/g' | sed 's/^[-_]*//;s/[-_]*$//')

          if [[ -z "$SANITIZED_NAME" ]]; then
            echo "Error: Image name cannot be empty after sanitization"
            exit 1
          fi

          echo "IMAGE_NAME=$SANITIZED_NAME" >> $GITHUB_ENV

      - name: Check if ECR repository exists
        run: |
          if aws ecr describe-repositories --repository-names "$IMAGE_NAME" 2>&1 | grep -q RepositoryNotFoundException; then
            echo "REPO_EXISTS=false" >> $GITHUB_ENV
          else
            echo "REPO_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Create ECR repository if not exists
        if: env.REPO_EXISTS == 'false'
        run: |
          aws ecr create-repository \
            --repository-name "$IMAGE_NAME" \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256 \
            --region $AWS_REGION

  start_runner:
    name: Start self-hosted EC2 runner
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'apply'
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.set-output.outputs.label }}
      ec2-instance-id: ${{ steps.set-output.outputs.ec2-instance-id }}
    steps:
      - name: Check for running EC2 runner
        id: check-runner
        run: |
          instances=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=ec2-github-runner" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].InstanceId' --output text)
          if [ -n "$instances" ]; then
            echo "runner_running=true" >> $GITHUB_ENV
            echo "existing_instance=$instances" >> $GITHUB_ENV
          else
            echo "runner_running=false" >> $GITHUB_ENV
          fi

      - name: Get latest Ubuntu 22.04 LTS AMI
        if: env.runner_running != 'true'
        run: |
          UBUNTU_AMI_ID=$(aws ec2 describe-images \
            --owners 099720109477 \
            --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" "Name=state,Values=available" \
            --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)

          echo "UBUNTU_AMI_ID=$UBUNTU_AMI_ID" >> $GITHUB_ENV

      - name: Start EC2 runner
        if: env.runner_running != 'true'
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ${{ env.UBUNTU_AMI_ID }}
          ec2-instance-type: t3.small
          subnet-id: ${{ needs.deploy_aws_infrastructure.outputs.private_data_subnet_az1_id }}
          security-group-id: ${{ needs.deploy_aws_infrastructure.outputs.runner_security_group_id }}
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}" }
            ]

      - name: Set runner label output
        id: set-output
        run: |
          if [ "${{ env.runner_running }}" == "true" ]; then
            echo "label=self-hosted" >> $GITHUB_OUTPUT
            echo "ec2-instance-id=${{ env.existing_instance }}" >> $GITHUB_OUTPUT
          else
            echo "label=${{ steps.start-ec2-runner.outputs.label }}" >> $GITHUB_OUTPUT
            echo "ec2-instance-id=${{ steps.start-ec2-runner.outputs.ec2-instance-id }}" >> $GITHUB_OUTPUT
          fi

  build_and_push_image:
    name: Build and push Docker image to ECR
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - create_ecr_repository
      - start_runner
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ${{ needs.start_runner.outputs.label || 'ubuntu-latest' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cleanup disk space (avoid "no space left on device")
        run: |
          echo "Cleaning up /var/cache/yum and docker to free space..."
          sudo rm -rf /var/cache/yum/*
          sudo docker system prune -af || true
          df -h

      - name: Update system and install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl unzip docker.io jq

      - name: Install AWS CLI
        run: |
          if ! command -v aws &> /dev/null; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            rm -rf aws awscliv2.zip
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          IMAGE_NAME="${{ needs.deploy_aws_infrastructure.outputs.image_name }}"
          IMAGE_TAG="${{ needs.deploy_aws_infrastructure.outputs.image_tag }}"
          ECR_REGISTRY="${{ needs.deploy_aws_infrastructure.outputs.ecr_registry }}"
          FULL_IMAGE_NAME="$ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG"

          docker build -t "$FULL_IMAGE_NAME" .

      - name: Push Docker image to ECR
        run: |
          IMAGE_NAME="${{ needs.deploy_aws_infrastructure.outputs.image_name }}"
          IMAGE_TAG="${{ needs.deploy_aws_infrastructure.outputs.image_tag }}"
          ECR_REGISTRY="${{ needs.deploy_aws_infrastructure.outputs.ecr_registry }}"
          FULL_IMAGE_NAME="$ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG"

          docker push "$FULL_IMAGE_NAME"

      - name: Verify pushed image
        run: |
          aws ecr describe-images --repository-name "${{ needs.deploy_aws_infrastructure.outputs.image_name }}" --image-ids imageTag="${{ needs.deploy_aws_infrastructure.outputs.image_tag }}"

  migrate_database:
    name: Migrate DB Data with Flyway
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - build_and_push_image
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Download Flyway CLI
        run: |
          FLYWAY_VER=${{ env.FLYWAY_VERSION }}
          wget -q https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/${FLYWAY_VER}/flyway-commandline-${FLYWAY_VER}-linux-x64.tar.gz
          tar -xzf flyway-commandline-${FLYWAY_VER}-linux-x64.tar.gz
          sudo ln -sf $(pwd)/flyway-${FLYWAY_VER}/flyway /usr/local/bin/flyway

      - name: Run Flyway Migrate
        run: |
          flyway -url="jdbc:postgresql://${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }}:5432/postgres" \
                 -user=postgres -password=postgres migrate

  deploy_to_ecs:
    name: Deploy to ECS
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - build_and_push_image
      - migrate_database
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update ECS task definition and service
        run: |
          AWS_REGION=${{ env.AWS_REGION }}
          TASK_DEFINITION_NAME="${{ needs.deploy_aws_infrastructure.outputs.task_definition_name }}"
          ECS_CLUSTER="${{ needs.deploy_aws_infrastructure.outputs.ecs_cluster_name }}"
          ECS_SERVICE="${{ needs.deploy_aws_infrastructure.outputs.ecs_service_name }}"
          IMAGE_NAME="${{ needs.deploy_aws_infrastructure.outputs.image_name }}"
          IMAGE_TAG="${{ needs.deploy_aws_infrastructure.outputs.image_tag }}"
          ECR_REGISTRY="${{ needs.deploy_aws_infrastructure.outputs.ecr_registry }}"

          # Fetch current task definition JSON
          TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME --region $AWS_REGION)

          # Update container image in task definition JSON
          UPDATED_TASK_DEF=$(echo "$TASK_DEF_JSON" | jq --arg IMAGE "$ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG" \
            '.taskDefinition.containerDefinitions[0].image = $IMAGE | del(.taskDefinition.status) | del(.taskDefinition.revision) | del(.taskDefinition.taskDefinitionArn) | del(.taskDefinition.compatibilities)')

          # Save updated task definition file
          echo "$UPDATED_TASK_DEF" > task-def.json

          # Register new task definition revision
          REGISTERED_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-def.json --region $AWS_REGION | jq -r '.taskDefinition.taskDefinitionArn')

          echo "Registered new task definition: $REGISTERED_TASK_DEF_ARN"

          # Update ECS service to use new task definition
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $REGISTERED_TASK_DEF_ARN --region $AWS_REGION

          echo "ECS service updated successfully."
