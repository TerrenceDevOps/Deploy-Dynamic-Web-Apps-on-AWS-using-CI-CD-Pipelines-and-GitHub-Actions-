name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: apply

jobs:
  # Configure AWS credentials 
  configure_aws_credentials:
    name: Configure AWS credentials
    runs-on: ubuntu-latest
    steps:
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

  # Build AWS infrastructure
  deploy_aws_infrastructure:
    name: Build AWS infrastructure
    needs: configure_aws_credentials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Run Terraform initialize
        working-directory: ./iac
        run: terraform init

      - name: Run Terraform apply/destroy
        working-directory: ./iac
        run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve

      - name: Get Terraform outputs
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          echo "Fetching Terraform outputs..."
          echo "IMAGE_NAME=$(terraform output -raw image_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "DOMAIN_NAME=$(terraform output -raw domain_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$(terraform output -raw rds_endpoint | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(terraform output -raw image_tag | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "PRIVATE_DATA_SUBNET_AZ1_ID=$(terraform output -raw private_data_subnet_az1_id | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "RUNNER_SECURITY_GROUP_ID=$(terraform output -raw runner_security_group_id | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "TASK_DEFINITION_NAME=$(terraform output -raw task_definition_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=$(terraform output -raw ecs_service_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "ENVIRONMENT_FILE_NAME=$(terraform output -raw environment_file_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV
          echo "ENV_FILE_BUCKET_NAME=$(terraform output -raw env_file_bucket_name | grep -Eo '^[^:]+' | tail -n 1)" >> $GITHUB_ENV

      - name: Print GITHUB_ENV contents
        run: cat $GITHUB_ENV

    outputs:
      terraform_action: ${{ env.TERRAFORM_ACTION }}
      image_name: ${{ env.IMAGE_NAME }}
      domain_name: ${{ env.DOMAIN_NAME }}
      rds_endpoint: ${{ env.RDS_ENDPOINT }}
      image_tag: ${{ env.IMAGE_TAG }}
      private_data_subnet_az1_id: ${{ env.PRIVATE_DATA_SUBNET_AZ1_ID }}
      runner_security_group_id: ${{ env.RUNNER_SECURITY_GROUP_ID }}
      task_definition_name: ${{ env.TASK_DEFINITION_NAME }}
      ecs_cluster_name: ${{ env.ECS_CLUSTER_NAME }}
      ecs_service_name: ${{ env.ECS_SERVICE_NAME }}
      environment_file_name: ${{ env.ENVIRONMENT_FILE_NAME }}
      env_file_bucket_name: ${{ env.ENV_FILE_BUCKET_NAME }}

  # Create ECR repository
  create_ecr_repository:
    name: Create ECR repository
    needs: deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sanitize and validate IMAGE_NAME
        run: |
          RAW_IMAGE_NAME="${{ needs.deploy_aws_infrastructure.outputs.image_name }}"
          echo "Raw IMAGE_NAME: $RAW_IMAGE_NAME"

          SANITIZED_NAME=$(echo "$RAW_IMAGE_NAME" | \
            tr '[:upper:]' '[:lower:]' | \
            sed 's/[^a-z0-9._/-]/-/g' | \
            sed 's/[-_]\+/-/g' | \
            sed 's/^[-_]*//;s/[-_]*$//')

          if [[ -z "$SANITIZED_NAME" ]]; then
            echo "Error: Image name cannot be empty after sanitization"
            exit 1
          fi

          if [[ ! "$SANITIZED_NAME" =~ ^[a-z0-9]+([._-][a-z0-9]+)*(/[a-z0-9]+([._-][a-z0-9]+)*)*$ ]]; then
            echo "Error: Sanitized name '$SANITIZED_NAME' still doesn't meet ECR requirements"
            exit 1
          fi

          echo "Sanitized IMAGE_NAME: $SANITIZED_NAME"
          echo "IMAGE_NAME=$SANITIZED_NAME" >> $GITHUB_ENV

      - name: Check if ECR repository exists
        run: |
          echo "Checking if ECR repo exists: $IMAGE_NAME"
          set +e
          REPO_CHECK=$(aws ecr describe-repositories --repository-names "$IMAGE_NAME" 2>&1)
          REPO_EXIT_CODE=$?
          set -e

          if [ $REPO_EXIT_CODE -eq 0 ]; then
            echo "Repository exists"
            echo "REPO_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Repository does not exist or error occurred: $REPO_CHECK"
            echo "REPO_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create ECR repository if not exists
        if: env.REPO_EXISTS == 'false'
        run: |
          echo "Creating ECR repository: $IMAGE_NAME"
          aws ecr create-repository \
            --repository-name "$IMAGE_NAME" \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256 \
            --region $AWS_REGION
          echo "ECR repository '$IMAGE_NAME' created successfully"

      - name: Set repository URI output
        run: |
          REPO_URI=$(aws ecr describe-repositories --repository-names "$IMAGE_NAME" --query 'repositories[0].repositoryUri' --output text)
          echo "ECR_REPOSITORY_URI=$REPO_URI" >> $GITHUB_ENV
          echo "Repository URI: $REPO_URI"
